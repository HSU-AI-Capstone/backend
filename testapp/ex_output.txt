import os
import time # API 호출 사이에 지연 시간을 두기 위해 추가
import requests
from openai import OpenAI 
from pptx import Presentation 
from pptx.util import Inches, Pt 
from pptx.dml.color import RGBColor 
from pptx.exc import PackageNotFoundError 

# --- OpenAI API 키 설정 ---
try:
    from config import openai_api_key # config.py 파일에서 API 키 가져오기
except ImportError:
    print("오류: config.py 파일을 찾을 수 없거나 파일 내에 openai_api_key가 설정되지 않았습니다.")
    print("config.py 파일을 생성하고 openai_api_key = 'YOUR_API_KEY' 형식으로 키를 입력해주세요.")
    exit()

# OpenAI 클라이언트 초기화
client = OpenAI(api_key=openai_api_key)

# --- 강의 내용을 구조화된 데이터로 정의 ---
# 각 슬라이드 데이터에 "slide_type" 키를 추가하여 페이지 유형 구분 (첫 페이지, 내용 페이지, 마지막 페이지)
structured_slides_base = [
    {
        "slide_type": "first_page",
        "title": "머신러닝 1주차 수업",
        "points": [
            {"text": "ML 개요·역사, 분류, 개발환경, 통계/EDA"}
        ],
        "notes": "이 ppt의 주제 설명. 1주차 머신러닝 기초 강의 자료입니다. 주요 개념과 환경 설정, 기초 통계 및 EDA 실습을 다룹니다."
    },
    {
        "slide_type": "content_page",
        "title": "머신러닝 개요 및 역사",
        "points": [
            {"text": "머신러닝의 정의와 전통 프로그래밍과의 차이",
             "explanation": "데이터를 통해 모델이 학습하는 방식과 기존 명령어 기반 프로그래밍 비교"},
            {"text": "머신러닝의 역사와 발전 과정",
             "explanation": "초기 연구부터 현대의 딥러닝까지 발전 과정 설명"},
            {"text": "주요 응용 분야: 이미지 처리, 자연어 처리, 추천 시스템 등",
             "explanation": "다양한 산업 및 기술 분야에서의 활용 사례"},
            {"text": "최근 동향 및 미래 전망",
             "explanation": "최신 기술 동향과 앞으로의 발전 가능성"}
        ],
        "notes": "머신러닝은 컴퓨터가 데이터로부터 학습하여 패턴을 찾고 의사결정을 하는 기술입니다. 전통적인 프로그래밍이 명시적인 규칙을 따르는 것과 달리, 머신러닝은 데이터를 기반으로 스스로 규칙을 학습합니다. 1950년대부터 시작된 머신러닝은 현재 컴퓨터 비전, 자연어 처리, 추천 시스템 등 다양한 분야에서 활용되고 있으며, 특히 딥러닝의 발전으로 더욱 강력한 성능을 보여주고 있습니다. 향후 더 많은 산업 분야에서 혁신을 이끌 것으로 전망됩니다."
    },
    {
        "slide_type": "content_page",
        "title": "머신러닝 분류 및 활용 사례",
        "points": [
            {"text": "지도학습",
             "explanation": "라벨이 있는 데이터를 이용해 학습하는 방식"},
            {"text": "비지도학습",
             "explanation": "라벨 없이 데이터 패턴을 학습하는 방식"},
            {"text": "강화학습",
             "explanation": "행동을 통해 보상을 최적화하는 학습 방식"}
        ],
        "notes": "머신러닝은 크게 세 가지 유형으로 분류됩니다. 지도학습은 입력과 정답이 쌍으로 주어진 데이터를 사용하여 모델을 학습시키는 방법으로, 이미지 분류나 스팸 메일 탐지 등에 활용됩니다. 비지도학습은 정답 없이 데이터의 패턴이나 구조를 발견하는 방법으로, 고객 세분화나 이상 탐지 등에 사용됩니다. 강화학습은 에이전트가 환경과 상호작용하며 시행착오를 통해 최적의 행동을 학습하는 방식으로, 게임 AI나 로봇 제어 등에 적용됩니다."
    },
    {
        "slide_type": "content_page",
        "title": "개발 환경 구축 및 기초 Python",
        "points": [
            {"text": "Python 설치 및 주요 라이브러리 소개",
             "explanation": "numpy, pandas, matplotlib, scikit-learn 등의 사용법"},
            {"text": "Jupyter Notebook 또는 Google Colab 사용법 실습",
             "explanation": "인터랙티브한 코딩 환경 구축 방법"}
        ],
        "notes": "머신러닝 개발을 위한 기본 환경으로 Python을 사용합니다. Python은 풍부한 라이브러리 생태계를 가지고 있으며, 특히 NumPy는 수치 계산, Pandas는 데이터 처리, Matplotlib은 시각화, Scikit-learn은 머신러닝 알고리즘 구현에 필수적입니다. Jupyter Notebook이나 Google Colab은 코드 실행과 결과를 즉시 확인할 수 있는 대화형 개발 환경을 제공하여, 데이터 분석과 모델 개발 과정을 효율적으로 만들어줍니다."
    },
    {
        "slide_type": "content_page",
        "title": "기본 통계 및 수학 개념",
        "points": [
            {"text": "확률, 분포, 선형대수 기초 개념 정리",
             "explanation": "머신러닝 알고리즘 이해를 위한 필수 수학 개념"},
            {"text": "필수 전제 지식",
             "explanation": "데이터 분석 및 알고리즘 개발 전 기본 지식 강조"}
        ],
        "notes": "머신러닝을 깊이 이해하기 위해서는 수학적 기초가 필요합니다. 확률론은 불확실성을 다루는 데 필수적이며, 통계적 분포는 데이터의 특성을 이해하는 데 중요합니다. 선형대수학은 행렬 연산과 벡터 공간을 다루는 기초가 되며, 특히 딥러닝에서 핵심적인 역할을 합니다. 미적분학은 최적화 과정을 이해하는 데 필요하며, 이러한 수학적 도구들은 머신러닝 알고리즘의 작동 원리를 이해하고 개선하는 데 필수적입니다."
    },
    {
        "slide_type": "content_page",
        "title": "실습 과제: EDA 및 시각화",
        "points": [
            {"text": "간단한 데이터셋 불러오기",
             "explanation": "CSV 파일 등에서 데이터를 읽어오는 방법"},
            {"text": "탐색적 데이터 분석(EDA) 실습",
             "explanation": "데이터의 특성을 파악하고 요약하는 과정"},
            {"text": "Python 코드 작성 및 시각화 실습",
             "explanation": "분석 결과를 시각적으로 표현하는 방법"}
        ],
        "notes": "탐색적 데이터 분석(EDA)은 머신러닝 프로젝트의 첫 단계입니다. Pandas를 사용하여 CSV, Excel 등 다양한 형식의 데이터를 불러오고, 기술 통계량 계산, 결측치 처리, 이상치 탐지 등을 수행합니다. Matplotlib과 Seaborn을 활용하여 히스토그램, 산점도, 박스플롯 등 다양한 시각화를 생성하여 데이터의 분포와 관계를 파악합니다. 이러한 과정을 통해 데이터의 특성을 이해하고, 적절한 전처리 방법과 모델링 전략을 수립할 수 있습니다."
    },
]

# --- 마지막 요약 슬라이드 동적 생성 ---
summary_points = []
for slide_item in structured_slides_base[1:]: # 첫 페이지(인덱스 0)는 제외
    if slide_item.get("slide_type") == "content_page": # 내용 페이지만 요약에 포함
        title = slide_item.get("title", "제목 없음")
        summary_points.append({
            "text": f"- {title}" # 요약에는 설명(explanation) 불필요
        })

last_slide_data = {
    "slide_type": "last_page", # 페이지 유형: 마지막 페이지
    "title": "이번 주 학습 내용 요약",
    "points": summary_points,
    "notes": "이번 주에 다룬 주요 학습 주제들을 요약합니다. 이번 주차에 학습한 머신러닝 개요부터 EDA 실습까지의 주요 주제들을 다시 한번 정리합니다."
}

# structured_slides 리스트에 마지막 슬라이드 추가
structured_slides = structured_slides_base + [last_slide_data]


# --- 이미지 생성 관련 함수들 ---
def generate_image_prompt(slide_data):
    """슬라이드 데이터를 기반으로 DALL-E 프롬프트를 생성합니다."""
    title = slide_data.get("title", "")
    points = slide_data.get("points", [])
    # points에서 'text'만 추출하여 프롬프트 내용 구성
    points_text = ". ".join(p.get('text', '') for p in points if p.get('text'))

    prompt = (
        "이 슬라이드의 내용을 시각적으로 단순화하고 요약하는 깔끔한 이미지. "
        "아이콘과 같은 간단한 시각적 요소를 포함. "
        "명확한 레이아웃 사용. 흰색 배경 선호. "
        "고등학생 또는 대학 초년생 대상. "
        "프레젠테이션 슬라이드용.\n"
        "매우 중요: 이미지에 어떤 텍스트, 글자, 캡션, 단어도 포함하지 마시오. 오직 시각 자료와 아이콘만.\n"
        f"주제: {title}\n"
        f"핵심 내용: {points_text}\n"
    )
    return prompt

def generate_dalle_image(prompt_f, image_filename_base):
    """DALL-E를 사용하여 이미지를 생성하고 로컬에 저장합니다."""
    filename = f"{image_filename_base}.jpg" # 저장될 이미지 파일명 (예: gen_img_1.jpg)
    try:
        print(f"  DALL-E 이미지 생성 중: {image_filename_base} (프롬프트 앞부분: '{prompt_f[:100]}...')")
        response = client.images.generate(
            model="dall-e-3",       # 사용할 DALL-E 모델
            prompt=prompt_f,        # 이미지 생성을 위한 텍스트 프롬프트
            size="1024x1024",       # 생성할 이미지 크기 (정사각형이 슬라이드에 적합)
            style="vivid",        # 이미지 스타일 ('vivid' 또는 'natural')
            quality="hd",     # 이미지 품질 ('standard' 또는 'hd')
            n=1,                    # 생성할 이미지 개수
        )
        image_url = response.data[0].url # 응답에서 이미지 URL 추출
        img_data = requests.get(image_url).content # 이미지 데이터 다운로드
        with open(filename, 'wb') as handler:
            handler.write(img_data) # 이미지 파일 저장
        print(f"  이미지 생성 및 저장 완료: {filename}")
        # API 속도 제한(rate limit)을 피하기 위해 잠시 대기
        print(f"  다음 DALL-E 요청 전 1초 대기...")
        time.sleep(1) # DALL-E 3는 분당 요청 수(RPM) 제한이 더 엄격할 수 있음
        return filename # 성공 시 파일명 반환
    except Exception as e:
        print(f"  DALL-E 이미지 ({filename}) 생성 중 오류 발생: {e}")
        return None # 실패 시 None 반환

def generate_images_for_slides(slides_data_list):
    """모든 'content_page' 슬라이드에 대해 이미지를 생성하고, 파일명을 slide_data에 추가합니다."""
    print("\n--- 이미지 생성 시작 ---")
    image_counter = 0 # 생성된 이미지 파일명 넘버링용
    for i, slide_data in enumerate(slides_data_list):
        if slide_data.get("slide_type") == "content_page": # 내용 페이지에 대해서만 이미지 생성
            image_counter += 1
            prompt = generate_image_prompt(slide_data)
            image_filename_base = f"gen_img_{image_counter}" # 예: "gen_img_1"
            generated_image_path = generate_dalle_image(prompt, image_filename_base)

            # 생성된 이미지 파일명을 슬라이드 데이터에 'picture' 키로 저장
            slide_data["picture"] = generated_image_path # 성공하면 파일명, 실패하면 None 저장
    print("--- 이미지 생성 완료 ---\n")
    return slides_data_list


# --- PPTX 생성 도우미 함수들 ---
def set_font_style(run, name="맑은 고딕", size=Pt(18), bold=False, color_rgb=RGBColor(0, 0, 0)):
    """텍스트 런(run)의 폰트 스타일을 설정합니다."""
    font = run.font
    font.name = name
    font.size = size
    font.bold = bold
    font.color.rgb = color_rgb

def set_slide_background(slide, color_rgb=(242, 242, 242)):
    """슬라이드 배경을 단색으로 설정합니다."""
    fill = slide.background.fill
    fill.solid()
    fill.fore_color.rgb = RGBColor(*color_rgb)


def add_image_to_slide(slide, image_path, left_inches, top_inches, width_inches, height_inches):
    """슬라이드의 지정된 위치에 이미지를 추가합니다."""
    if not image_path or not os.path.exists(image_path): # 이미지 경로가 없거나 파일이 존재하지 않으면
        print(f"    경고: 이미지 파일 '{image_path}'을(를) 찾을 수 없거나 경로가 None입니다. 이미지 삽입을 건너뜁뜁니다.")
        return
    try:
        # 이미지 추가 (너비와 높이를 모두 지정하여 비율 유지 안 함, 필요시 하나만 지정)
        slide.shapes.add_picture(image_path, Inches(left_inches), Inches(top_inches), Inches(width_inches), Inches(height_inches))
        print(f"    이미지 '{image_path}' 추가 완료.")
    except Exception as e:
        print(f"    이미지 '{image_path}' 추가 중 오류 발생: {e}")


def populate_slide_content(slide, slide_data, is_first_page=False, is_content_page_with_image=False):
    """슬라이드 종류에 따라 제목, 본문, 노트 내용을 채웁니다."""
    # 제목 설정
    title_shape = slide.shapes.title # 제목 도형 가져오기
    if title_shape: # 제목 도형이 있는 레이아웃인 경우
        title_shape.text = slide_data.get("title", "제목 없음")
        tf = title_shape.text_frame
        if tf.paragraphs: # 텍스트 프레임에 단락이 있으면
            p = tf.paragraphs[0]
            run = p.runs[0] if p.runs else p.add_run() # 기존 런 사용 또는 새 런 추가
            if not run.text: run.text = title_shape.text # 런에 텍스트가 없으면 설정
            set_font_style(run, name="Calibri", size=Pt(32), bold=True, color_rgb=RGBColor(0, 51, 102))

    # 본문 내용 설정 (points)
    # 첫 페이지는 부제목(placeholder 1), 내용/마지막 페이지는 본문(placeholder 1)
    body_placeholder_index = 1
    if slide.placeholders and len(slide.placeholders) > body_placeholder_index:
        body_shape = slide.placeholders[body_placeholder_index]
        tf = body_shape.text_frame
        tf.clear()  # 기존 텍스트 프레임 내용 삭제
        tf.word_wrap = True # 자동 줄 바꿈 활성화

        points = slide_data.get("points", [])
        for point in points:
            # 주요 내용 추가 (Level 0)
            p_main = tf.add_paragraph()
            run_main = p_main.add_run()
            run_main.text = point.get("text", "")
            if is_first_page: # 첫 페이지 스타일
                set_font_style(run_main, name="Calibri", size=Pt(24), color_rgb=RGBColor(64, 64, 64))
                p_main.level = 0
            else: # 내용 페이지 또는 마지막 페이지 스타일
                set_font_style(run_main, name="Calibri", size=Pt(18), bold=True, color_rgb=RGBColor(64, 64, 64))
                p_main.level = 0

                # 설명 추가 (Level 1) - explanation이 있는 경우에만
                if "explanation" in point and point["explanation"]:
                    p_expl = tf.add_paragraph()
                    run_expl = p_expl.add_run()
                    run_expl.text = point["explanation"]
                    set_font_style(run_expl, name="Calibri", size=Pt(16), color_rgb=RGBColor(100, 100, 100))
                    p_expl.level = 1 # 들여쓰기 레벨 1

    # 슬라이드 노트 추가
    if "notes" in slide_data and slide_data["notes"]:
        notes_slide = slide.notes_slide
        text_frame = notes_slide.notes_text_frame
        text_frame.clear()
        p_notes = text_frame.add_paragraph()
        run_notes = p_notes.add_run()
        run_notes.text = slide_data["notes"]
        set_font_style(run_notes, name="Calibri", size=Pt(11)) # 노트 폰트 스타일

def create_presentation(slides_data, filename="presentation_with_images_final.pptx"):
    """주어진 슬라이드 데이터로 PowerPoint 프레젠테이션을 생성하고 저장합니다."""
    prs = Presentation()
    print("새 PowerPoint 프레젠테이션 객체 생성 완료.")

    # 슬라이드 레이아웃 정의
    title_slide_layout = prs.slide_layouts[0] # 제목 슬라이드
    content_layout = prs.slide_layouts[1]     # 제목 및 내용 (일반적인 내용 슬라이드)

    # --- 내용 페이지의 이미지 및 텍스트 상자 위치/크기 설정 (인치 단위) ---
    # 이미지 설정
    IMG_RIGHT_MARGIN_INCHES = 0.5  # 슬라이드 오른쪽 가장자리에서 이미지까지의 여백
    IMG_WIDTH_INCHES = 3.8         # 이미지 너비
    IMG_HEIGHT_INCHES = 3.8        # 이미지 높이
    IMG_TOP_INCHES = 1.9           # 슬라이드 상단에서 이미지 상단까지의 거리 (수평선 아래, 제목과 본문 사이 시작점 고려)

    # 텍스트 상자 설정
    TEXT_LEFT_MARGIN_INCHES = 0.5  # 슬라이드 왼쪽 가장자리에서 텍스트 상자까지의 여백
    TEXT_TOP_INCHES = IMG_TOP_INCHES # 텍스트 상자의 상단을 이미지의 상단과 일치시킴
    TEXT_RIGHT_PADDING_TO_IMAGE = 0.3 # 텍스트 상자 오른쪽과 이미지 왼쪽 사이의 여백
    MIN_TEXT_WIDTH_INCHES = 0.5 # 텍스트 상자의 최소 허용 너비 (이보다 작으면 경고 수준을 높이거나 다른 조치)

    # 수평선 설정
    LINE_TOP_INCHES = 1.7          # 제목 아래, 텍스트/이미지 영역 시작 전 (조정 가능)
    LINE_LEFT_MARGIN_INCHES = TEXT_LEFT_MARGIN_INCHES # 텍스트와 동일한 왼쪽 여백에서 시작

    print("슬라이드 생성 시작...")
    for index, slide_data in enumerate(slides_data):
        slide_type = slide_data.get("slide_type", "content_page")
        print(f"  슬라이드 {index + 1}/{len(slides_data)} 생성 중 (유형: {slide_type}, 제목: '{slide_data.get('title', '')[:30]}...')")

        current_layout = content_layout # 기본 레이아웃
        is_first = False
        is_content_with_image = False

        if slide_type == "first_page":
            current_layout = title_slide_layout
            is_first = True
        elif slide_type == "content_page":
            current_layout = content_layout
            is_content_with_image = True
        elif slide_type == "last_page":
            current_layout = content_layout

        slide = prs.slides.add_slide(current_layout)
        set_slide_background(slide) # 모든 슬라이드에 배경색 적용

        # --- 내용 페이지(content_page)인 경우, 텍스트 영역 조절 및 이미지 삽입 ---
        if is_content_with_image:
            # 1. 이미지 위치 결정 (오른쪽 정렬)
            image_actual_left_inches = prs.slide_width.inches - IMG_RIGHT_MARGIN_INCHES - IMG_WIDTH_INCHES

            # 2. 텍스트 플레이스홀더(본문 영역) 위치 및 크기 조절
            if len(slide.placeholders) > 1: # 본문 플레이스홀더(보통 index 1)가 있는지 확인
                body_placeholder = slide.placeholders[1]
                # 텍스트 상자 왼쪽 위치 설정
                body_placeholder.left = Inches(TEXT_LEFT_MARGIN_INCHES)
                # 텍스트 상자 상단 위치 설정 (이미지와 동일선상 또는 고정값)
                body_placeholder.top = Inches(TEXT_TOP_INCHES)
                # 텍스트 상자 너비 계산 및 설정
                # (이미지 왼쪽 경계) - (텍스트 상자 왼쪽 위치) - (텍스트와 이미지 사이 여백)
                calculated_text_width_inches = image_actual_left_inches - TEXT_LEFT_MARGIN_INCHES - TEXT_RIGHT_PADDING_TO_IMAGE
                # 계산된 너비로 설정 (겹치지 않도록 하는 것이 최우선)
                body_placeholder.width = Inches(calculated_text_width_inches)
                print(f"    텍스트 플레이스홀더 위치/크기 조절 완료: L={TEXT_LEFT_MARGIN_INCHES:.2f}, T={TEXT_TOP_INCHES:.2f}, W={calculated_text_width_inches:.2f}")



            else:
                print(f"    경고: 현재 슬라이드 레이아웃에 본문 플레이스홀더(index 1)가 없습니다. 텍스트/이미지 위치 자동 조절 불가.")

            # 3. 이미지 삽입 (조정된 텍스트 영역을 고려한 위치에)
            image_path = slide_data.get("picture") # 생성된 이미지 파일 경로
            if image_path:
                add_image_to_slide(slide, image_path, image_actual_left_inches, IMG_TOP_INCHES, IMG_WIDTH_INCHES, IMG_HEIGHT_INCHES)
            else:
                print(f"    이미지 데이터 없음 (슬라이드 제목: {slide_data.get('title')})")

        # --- 텍스트 내용 채우기 (제목, 포인트, 설명) ---
        populate_slide_content(slide, slide_data, is_first_page=is_first, is_content_page_with_image=is_content_with_image)

        # --- 수평선 추가 (제목 아래) ---
        if slide_type != "first_page": # 첫 페이지에는 선을 그리지 않음
            line_actual_left_inches = Inches(LINE_LEFT_MARGIN_INCHES)
            line_actual_width_inches = prs.slide_width.inches - (2 * LINE_LEFT_MARGIN_INCHES) # 기본 전체 너비 (여백 제외)

            if is_content_with_image and len(slide.placeholders) > 1:
                try:
                    body_placeholder_for_line = slide.placeholders[1]
                    line_actual_left_inches = body_placeholder_for_line.left.inches
                    line_actual_width_inches = body_placeholder_for_line.width.inches
                except (IndexError, AttributeError) as e:
                    print(f"    수평선 너비 계산 중 오류 (플레이스홀더 접근 불가): {e}. 기본 너비 사용.")
            
    
    # --- 프레젠테이션 저장 ---
    print(f"\n프레젠테이션 저장 시도: {filename}")
    try:
        prs.save(filename)
        print(f"PPT 파일이 성공적으로 생성되었습니다: {filename}")
    except PermissionError:
        print(f"  오류: '{filename}' 파일에 대한 쓰기 권한이 없습니다. 파일이 다른 프로그램에서 열려있는지 확인하세요.")
    except PackageNotFoundError:
        print(f"  오류: '{filename}' 파일 경로가 유효하지 않거나 접근할 수 없습니다.")
    except Exception as e:
        print(f"  PPT 파일 저장 중 예상치 못한 오류 발생: {e}")


# --- 메인 실행 부분 ---
if __name__ == "__main__":
    # 1. DALL-E를 사용하여 이미지 생성 및 structured_slides 데이터 업데이트
    structured_slides_with_images = generate_images_for_slides(structured_slides) # 항상 이미지 생성 시도

    # 2. 업데이트된 슬라이드 데이터로 프레젠테이션 생성
    output_filename = "자동생성_머신러닝_1주차.pptx"
    create_presentation(structured_slides_with_images, output_filename)

    print("\n--- 스크립트 실행 완료 ---")
    print(f"생성된 이미지 파일(있는 경우)은 현재 디렉토리에 gen_img_*.jpg 형태로 저장됩니다.")
    print(f"최종 프레젠테이션 파일: {output_filename}")